#1.Implement Binary Tree:

class TreeNode:
    def __init__(self, value):
        self.val = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self, root):
        self.root = TreeNode(root)

#2.Find the height of a given tree (max depth):

def find_tree_height(node):
    if node is None:
        return 0
    left_height = find_tree_height(node.left)
    right_height = find_tree_height(node.right)
    return max(left_height, right_height) + 1

#3.Perform Pre-order, Post-order, In-order traversal:

def preorder_traversal(node):
    if node:
        print(node.val)
        preorder_traversal(node.left)
        preorder_traversal(node.right)

def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        print(node.val)
        inorder_traversal(node.right)

def postorder_traversal(node):
    if node:
        postorder_traversal(node.left)
        postorder_traversal(node.right)
        print(node.val)

#4.Function to print all the leaves in a given binary tree:

def print_leaves(node):
    if node:
        if node.left is None and node.right is None:
            print(node.val)
        print_leaves(node.left)
        print_leaves(node.right)

#5.Implement BFS (Breadth-First Search):

from collections import deque

def breadth_first_search(root):
    if root is None:
        return []
    result = []
    queue = deque()
    queue.append(root)
    
    while queue:
        node = queue.popleft()
        result.append(node.val)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    
    return result

#6.Implement DFS (Depth-First Search):

def depth_first_search(node):
    if node:
        visited = set()
        stack = []
        stack.append(node)
        
        while stack:
            current_node = stack.pop()
            if current_node not in visited:
                visited.add(current_node)
                print(current_node.val)
                stack.extend(child for child in [current_node.right, current_node.left] if child)

#7.Find the sum of all left leaves in a binary tree:

def sum_of_left_leaves(root):
    if not root:
        return 0
    sum_left = 0
    if root.left and not root.left.left and not root.left.right:
        sum_left += root.left.val
    sum_left += sum_of_left_leaves(root.left)
    sum_left += sum_of_left_leaves(root.right)
    return sum_left

#8.Find the sum of all nodes of the given perfect binary tree:

def sum_perfect_binary_tree(root, level=1):
    if not root:
        return 0
    num_nodes = 2 ** (level - 1)  # Number of nodes at this level
    return num_nodes * root.val + sum_perfect_binary_tree(root.left, level + 1)

#9.Count subtrees that sum up to a given value x in a binary tree:

def count_subtrees_with_sum(root, x):
    if not root:
        return 0

    def dfs(node):
        if not node:
            return 0
        total = node.val + dfs(node.left) + dfs(node.right)
        return total

    def count_subtrees(node):
        if not node:
            return 0
        count = count_subtrees(node.left) + count_subtrees(node.right)
        if dfs(node) == x:
            count += 1
        return count

    return count_subtrees(root)

#10.Find the maximum level sum in a Binary Tree:


def max_level_sum(root):
    if not root:
        return 0

    max_sum = float('-inf')
    max_level = 1
    level = 1

    queue = [root]

    while queue:
        level_sum = sum(node.val for node in queue)
        if level_sum > max_sum:
            max_sum = level_sum
            max_level = level
        level += 1

        new_queue = []
        for node in queue:
            if node.left:
                new_queue.append(node.left)
            if node.right:
                new_queue.append(node.right)

        queue = new_queue

    return max_level

#11.Print the nodes at odd levels of a tree:

def print_nodes_at_odd_levels(root, level=1):
    if not root:
        return
    if level % 2 != 0:
        print(root.val)
    print_nodes_at_odd_levels(root.left, level + 1)
    print_nodes_at_odd_levels(root.right, level + 1)

